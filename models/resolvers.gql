type Response @embedded {
  ok: Boolean!
  error: String
  user: User
  inventory: Inventory
  character: Character
  install: PackInstall
  uninstall: Pack
}

type Query {
  #
  getGuildInstance(guildId: String!): Instance!
    @resolver(name: "get_guild_instance")

  #
  getUserInventory(userId: String!, guildId: String!): Inventory!
    @resolver(name: "get_user_inventory")

  #
  getUsersInventories(usersIds: [String!], guildId: String!): [Inventory!]
    @resolver(name: "get_users_inventories")

  #
  findMedia(mediaIds: [String!], guildId: String!): [Character!]
    @resolver(name: "find_media")

  #
  findCharacters(charactersId: [String!], guildId: String!): [Character!]
    @resolver(name: "find_characters")

  #
  getActiveInventories(guildId: String!): [Inventory!]
    @resolver(name: "get_active_inventories")

  #
  getPacksByUserId(userId: String!): [Pack!]
    @resolver(name: "get_packs_by_user_id")

  #
  getMostInstalledPacks: [Pack!] @resolver(name: "get_most_installed_packs")
}

type Mutation {
  #
  publishPack(userId: String!, manifest: ManifestInput!): Response!
    @resolver(name: "publish_pack")

  #
  addPackToInstance(
    guildId: String!
    userId: String!
    packId: String!
  ): Response! @resolver(name: "add_pack_to_instance")

  #
  removePackFromInstance(guildId: String!, packId: String!): Response!
    @resolver(name: "remove_pack_from_instance")

  #
  addTokensToUser(userId: String!, amount: Int!): Response!
    @resolver(name: "add_tokens_to_user")

  #
  exchangeTokensForPulls(
    userId: String!
    guildId: String!
    amount: Int!
  ): Response! @resolver(name: "exchange_tokens_for_pulls")

  #
  exchangeTokensForGuarantees(userId: String!, guarantee: Int!): Response!
    @resolver(name: "exchange_tokens_for_guarantees")

  #
  addCharacterToInventory(
    userId: String!
    guildId: String!
    characterId: String!
    mediaId: String!
    guaranteed: Boolean!
    rating: Int!
  ): Response! @resolver(name: "add_character_to_inventory")

  #
  replaceCharacters(
    userId: String!
    guildId: String!
    characterId: String!
    mediaId: String!
    rating: Int!
    sacrifices: [String!]!
  ): Response! @resolver(name: "replace_characters")

  #
  setCharacterToParty(
    userId: String!
    guildId: String!
    characterId: String!
    spot: Int
  ): Response! @resolver(name: "set_character_to_party")
  #
  swapCharactersInParty(
    userId: String!
    guildId: String!
    a: Int!
    b: Int!
  ): Response! @resolver(name: "swap_characters_in_party")
  #
  removeCharacterFromParty(
    userId: String!
    guildId: String!
    spot: Int!
  ): Response! @resolver(name: "remove_character_from_party")

  #
  giveCharacters(
    userId: String!
    targetId: String!
    guildId: String!
    charactersIds: [String!]!
  ): Response! @resolver(name: "give_characters")

  #
  tradeCharacters(
    userId: String!
    targetId: String!
    guildId: String!
    giveCharactersIds: [String!]!
    takeCharactersIds: [String!]!
  ): Response! @resolver(name: "trade_characters")

  #
  setCharacterNickname(
    userId: String!
    guildId: String!
    characterId: String!
    nickname: String
  ): Response! @resolver(name: "set_character_nick")

  #
  setCharacterImage(
    userId: String!
    guildId: String!
    characterId: String!
    image: String
  ): Response! @resolver(name: "set_character_image")

  #
  likeCharacter(
    userId: String!
    guildId: String!
    characterId: String!
  ): Response! @resolver(name: "like_character")
  #
  unlikeCharacter(
    userId: String!
    guildId: String!
    characterId: String!
  ): Response! @resolver(name: "unlike_character")

  #
  likeMedia(userId: String!, mediaId: String!): Response!
    @resolver(name: "like_media")
  #
  unlikeMedia(userId: String!, mediaId: String!): Response!
    @resolver(name: "unlike_media")

  #
  failSteal(
    userId: String!
    guildId: String!
    sacrifices: [String!]!
  ): Response! @resolver(name: "fail_steal")

  #
  stealCharacter(
    userId: String!
    guildId: String!
    characterId: String!
    sacrifices: [String!]!
  ): Response! @resolver(name: "steal_character")

  setCharacterStats(
    userId: String!
    guildId: String!
    characterId: String!
    strength: Int
    stamina: Int
    agility: Int
  ): Response! @resolver(name: "set_character_stats")
}
