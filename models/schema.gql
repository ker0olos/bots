type User @collection(name: "user") {
  # discord user id
  id: String!
  # all the inventories this user owns
  inventories: [Inventory!]!
  # all the badges this user owns
  badges: [Badge!]
  #
  lastVote: Time
  # the amount of votes available to be exchanged for rewards
  availableVotes: Int
  #
  dailyTimestamp: Time
  # guaranteed pulls
  guarantees: [Int!]
  # liked (protected) characters
  likes: [Like!]
}

type Guild @collection(name: "guild") {
  # discord guild id
  id: String!
  # servers can have multiple sandboxed instances
  instances: [Instance!]!
}

type Instance @collection(name: "instance") {
  # the main/default instance
  main: Boolean!
  # each user has an inventory
  inventories: [Inventory!]!
  # the guild where the instance resides
  guild: Guild!
  # community packs installed on the instance
  packs: [PackInstall!]!
}

type Inventory @collection(name: "inventory") {
  # the amount of pulls available to the user
  availablePulls: Int!
  #
  rechargeTimestamp: Time
  #
  stealTimestamp: Time
  # the time the user last pulled a gacha
  lastPull: Time
  # the party linked to this user's inventory
  party: Party
  # all the characters this user owns
  characters: [Character!]!
  # the instance that contains this user's inventory
  instance: Instance!
  # the user that owns this inventory
  user: User!
}

type Character @collection(name: "character") {
  # the character pack-id:id
  id: String!
  # the media pack-id:id
  mediaId: String!
  # the rating of the character
  rating: Int!
  # a custom image
  nickname: String
  # a custom image url
  image: String
  # the instance that contains this character
  instance: Instance!
  # the inventory where this character is currently
  inventory: Inventory!
  # the user that owns this character currently
  user: User!
}

type Pack @collection(name: "pack") {
  # the pack's manifest
  manifest: Manifest!
  # first added timestamp
  added: Time!
  # last updated timestamp
  updated: Time!
  # version number
  version: Int!
  # original owner
  owner: String!
  # approved by us
  approved: Boolean
  # the amount of servers the pack is installed on currently
  servers: Int
}

type Badge @collection(name: "badge") {
  # the name of the badge
  name: String!
  # short description of the badge
  description: String!
  # the emote representing the badge
  emote: String!
  # all users who own this badge
  users: [User!]!
}

type Party @embedded {
  member1: Character
  member2: Character
  member3: Character
  member4: Character
  member5: Character
}

type Like @embedded {
  mediaId: String
  characterId: String
}

type PackInstall @embedded {
  ref: Pack!
  timestamp: Time!
  by: String!
}
